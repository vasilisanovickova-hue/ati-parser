const puppeteer = require('puppeteer');

const browser = await puppeteer.launch({
    headless: "new",  // –∏–ª–∏ true, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω GUI
    args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--no-first-run',
        '--no-zygote',
        '--single-process' // –í–∞–∂–Ω–æ –¥–ª—è Render
    ],
    executablePath: process.env.CHROME_PATH || undefined
});

    const page = await browser.newPage();

    try {
        console.log('1. –û—Ç–∫—Ä—ã–≤–∞–µ–º: https://loads.ati.su');
        await page.goto('https://loads.ati.su', { waitUntil: 'networkidle0', timeout: 60000 });

        // –ñ–¥—ë–º 7 —Å–µ–∫—É–Ω–¥ ‚Äî —á—Ç–æ–±—ã React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
        await new Promise(resolve => setTimeout(resolve, 7000));

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä: –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
        const filterHash = '?filter=%7B"from"%3A%7B"id"%3A135%2C"type"%3A2%2C"exactOnly"%3Afalse%7D%2C"to"%3A%7B"id"%3A1%2C"type"%3A2%2C"exactOnly"%3Afalse%7D%2C"dates"%3A%7B"dateOption"%3A"today-plus"%7D%2C"extraParams"%3A0%2C"excludeTenders"%3Afalse%2C"sortingType"%3A2%7D&version=v2';

        await page.evaluate((hash) => {
            window.location.hash = hash;
        }, filterHash);

        console.log('2. –•—ç—à —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é');

        // –ñ–¥—ë–º 30 —Å–µ–∫—É–Ω–¥ ‚Äî —á—Ç–æ–±—ã –≥—Ä—É–∑—ã —Ç–æ—á–Ω–æ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
        await new Promise(resolve => setTimeout(resolve, 30000));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä—É–∑—ã
        const hasLoads = await page.$('[data-app="pretty-load"]') !== null;

        if (!hasLoads) {
            console.log('‚ùå –ì—Ä—É–∑—ã –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å');
            return;
        }

        console.log('üöö –ì—Ä—É–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const results = await page.evaluate(() => {
    const items = Array.from(document.querySelectorAll('[data-app="pretty-load"]'));
    return items.map(item => {
        // –ò—â–µ–º –≥–æ—Ä–æ–¥–∞
        const cityElements = Array.from(item.querySelectorAll('div.xsQQG'));
        const from = cityElements[0]?.textContent.trim() || '‚Äî';
        const to = cityElements[1]?.textContent.trim() || '‚Äî';

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å
        const weightEl = item.querySelector('span.OIT8K');
        const weightText = weightEl?.textContent || '';
        const weightMatch = weightText.match(/(\d+(\.\d+)?)\s*—Ç/);
        const weight = weightMatch ? weightMatch[1] + ' —Ç' : '‚Äî';

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
        const priceEl = item.querySelector('[data-testid="compact-view-hidden-rate"]');
        const price = priceEl?.textContent.trim() || '–°—Ç–∞–≤–∫–∞ —Å–∫—Ä—ã—Ç–∞';

        // –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –∏–∑ data-load-id
        const loadId = item.getAttribute('data-load-id') || '‚Äî';
        const link = loadId && loadId !== '‚Äî'
            ? `https://loads.ati.su/loadinfo/${loadId}`
            : '#';

        return { from, to, weight, price, link };
    });
});

        console.log('‚úÖ –°–æ–±—Ä–∞–Ω–æ –≥—Ä—É–∑–æ–≤:', results.length);
        console.log(results);

      

        console.log('‚úÖ –í—Å–µ –≥—Ä—É–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
        console.log(results);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google –¢–∞–±–ª–∏—Ü—É
        const formUrl = 'https://docs.google.com/forms/d/e/1FAIpQLSewZDD-roxaFvIql8olF-vACwspYJFaY4AisDAJOS5akaSt3Q/formResponse';

        for (const load of results) {
            const formData = new URLSearchParams();
            formData.append('entry.1286213485', load.from);
            formData.append('entry.469133788', load.to);
            formData.append('entry.629164283', load.weight);
            formData.append('entry.140660058', load.price);
            formData.append('entry.1860236215', load.link);
            formData.append('entry.1887606198', new Date().toLocaleString('ru-RU'));

            try {
                const response = await fetch(formUrl, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                });

                if (response.ok) {
                    console.log(`‚úÖ –ì—Ä—É–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${load.from} ‚Üí ${load.to}`);
                } else {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${response.status}`);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
            }

            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        console.log('‚úÖ –í—Å–µ –≥—Ä—É–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }

    // browser.close(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã–ª—Å—è
})();